; = Prelude.TAM ================================================================

(core.define asm.loadl (core.lambda (quoted-integer)
  (core.list (core.string.concat @"LOADL" @" " (core.integer-to-string quoted-integer)))))

(core.define asm.loads (core.lambda (quoted-string)
  (core.list.map
    (core.lambda (quoted-character)
      (asm.loadl (core.character.ord quoted-character)))
    (core.list.reverse (core.string-to-list quoted-string)))))

(core.define print-int (core.lambda (integer-instruction)
  (core.list.concat integer-instruction @("CALL putint" "CALL puteol"))))

(core.define print-str (core.lambda (string-instructions)
  (core.list.concat
    string-instructions
    (core.repeat (core.list.size string-instructions) @"CALL put")
    @("CALL puteol"))))

(core.define + (core.lambda (a b)
  (core.list.concat a b @("CALL add"))))

(core.define - (core.lambda (a b)
  (core.list.concat a b @("CALL sub"))))

; =============================================================================

(print-int (+ 3 (- 2 1)))
(print-str "Hello")

