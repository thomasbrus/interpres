; = Prelude.TAM ================================================================

(core.define asm.loadl (core.lambda (quoted-integer)
    (core.list (core.string.concat
        @"LOADL " (core.integer-to-string quoted-integer)))))

(core.define asm.address (core.lambda (offset register)
    (core.string.concat
        (core.integer-to-string offset)
        @"[" (core.symbol-to-string register) @"]")))

(core.define print-int (core.lambda (integer)
    (core.list.concat integer @("CALL putint" "CALL puteol"))))

; ==============================================================================

(core.define a 3)

(core.let (a 1, b 2) (print-int a))

