; = prelude.tam ================================================================

(core.define @asm.address (core.lambda (offset register)
    (core.string.concat
        (core.integer-to-string offset)
        @"[" (core.symbol-to-string register) @"]")))

(core.define @asm.push (core.lambda (amount)
    (core.list (core.string.concat @"PUSH " (core.integer-to-string amount)))))

(core.define @asm.pop (core.lambda (amount)
    (core.list (core.string.concat @"POP " (core.integer-to-string amount)))))

(core.define @asm.load (core.lambda (address)
    (core.list (core.string.concat @"LOAD(1) " address))))

(core.define @asm.loadl (core.lambda (quoted-integer)
    (core.list (core.string.concat
        @"LOADL " (core.integer-to-string quoted-integer)))))

(core.define @asm.loadc (core.lambda (quoted-character)
    (asm.loadl (core.character.ord quoted-character))))

(core.define @asm.loads (core.lambda (quoted-string)
  (core.list.map
    (core.lambda (quoted-character) (asm.loadc quoted-character))
    (core.list.reverse (core.string-to-list quoted-string)))))

(core.define @asm.store (core.lambda (address)
    (core.list (core.string.concat @"STORE(1) " address))))

(core.define @asm.jump (core.lambda (address)
    (core.list (core.string.concat @"JUMP " address))))

(core.define @asm.jumpif (core.lambda (truth-value address)
    (core.list (core.string.concat
        @"JUMPIF(" (core.integer-to-string truth-value) @") " address))))

(core.define @print-int (core.lambda (integer)
    (core.list.concat integer @("CALL putint" "CALL puteol"))))

(core.define @print-str (core.lambda (string)
    (core.list.concat
      string
      (core.repeat (core.list.size string) @"CALL put")
      @("CALL puteol"))))

(core.define @+ (core.lambda (a b)
    (core.list.concat a b @("CALL add"))))

(core.define @- (core.lambda (a b)
    (core.list.concat a b @("CALL sub"))))

(core.define @* (core.lambda (a b)
    (core.list.concat a b @("CALL mult"))))

(core.define @/ (core.lambda (a b)
    (core.list.concat a b @("CALL div"))))

(core.define @% (core.lambda (a b)
    (core.list.concat a b @("CALL mod"))))

; = prelude.tam.variables ======================================================

; TODO: Create IntegerLiteral
; TODO: Add Integer parsing rules
; TODO: Always treat @4 as symbol
; TODO: Create quoted.values
; TODO: Add set!/redefine
; TODO: Alter syntax: (core/list/concat a b c)

(core.define @asm.variables.counter @0)

(core.define @assign (core.lambda (identifier value)
    (core.list.concat value (asm.store ~(core.symbol.concat identifier @: @address)))))

(core.define @var (core.lambda (identifier initial-value)
    (core.let (address (asm.address asm.variables.counter @SB))
      (core.define @asm.variables.counter (core.integer.add @1 asm.variables.counter))
      (core.define identifier (asm.load address))
      (core.define (core.symbol.concat identifier @: @address) address)
      (core.list.concat
        (asm.push @1)
        (assign identifier initial-value)))))

; ==============================================================================

(var @my-age 22)
(var @my-height 187)

(print-int my-age)

(assign @my-age 23)

(print-int my-age)
(print-int my-height)

(assign @my-height 188)

; ==============================================================================

(asm.pop asm.variables.counter)

@HALT

