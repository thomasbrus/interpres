; = Prelude.TAM ================================================================

(core.define asm.loadl (core.lambda (quoted-integer)
    (core.list (core.string.concat
        @"LOADL" @" " (core.integer-to-string quoted-integer)))))

(core.define asm.loads (core.lambda (quoted-string)
  (core.list.map
    (core.lambda (quoted-character)
      (asm.loadl (core.character.ord quoted-character)))
    (core.list.reverse (core.string-to-list quoted-string)))))

(core.define asm.address (core.lambda (offset register)
    (core.string.concat
        (core.integer-to-string offset)
        @"[" (core.symbol-to-string register) @"]")))

(core.define asm.jump (core.lambda (address)
    (core.list (core.string.concat @"JUMP " address))))

(core.define asm.jumpif (core.lambda (truth-value address)
    (core.list (core.string.concat
        @"JUMPIF(" (core.integer-to-string truth-value) @") " address))))

(core.define print-int (core.lambda (integer)
    (core.list.concat integer @("CALL putint" "CALL puteol"))))

(core.define print-str (core.lambda (string)
    (core.list.concat
      string
      (core.repeat (core.list.size string) @"CALL put")
      @("CALL puteol"))))

(core.define + (core.lambda (a b)
    (core.list.concat a b @("CALL add"))))

(core.define - (core.lambda (a b)
    (core.list.concat a b @("CALL sub"))))

(core.define < (core.lambda (a b)
    (core.list.concat a b @("CALL lt"))))

(core.define if (core.lambda (predicate consequent alternative)
    (core.list.concat
      predicate
      (asm.jumpif @0 (asm.address (core.integer.add @2 (core.list.size consequent)) @CP))
      consequent
      (asm.jump (asm.address (core.integer.add @1 (core.list.size alternative)) @CP))
      alternative)))

; ==============================================================================

(if (< (+ 4 3) (- 10 2))
  (print-str "Yes")
  (print-str "No"))

@HALT

