(core.define @var (core.lambda (identifier initial-value)
    (core.let (address (asm.address asm.stack.size @SB))
      (asm.stack.increase)
      (core.define identifier (asm.load address))
      (core.define (core.symbol.concat identifier @: @address) address)
      (core.list.concat
        (asm.push @1)
        (assign identifier initial-value)))))


(core.define @var-array (core.lambda (identifier input-array)
    (core.let (start-address (asm.address asm.stack.size @SB), index @0)
      (core.list.concat 
        (core.define identifier (asm.load start-address))
        (core.define (core.symbol.concat identifier @: @address) start-address)
        (asm.push (core.list.size input-array))
        (core.list.map
          (core.lambda (entity) 
            (core.let (address (asm.address asm.stack.size @SB))
              (core.list.concat 
                (core.list entity)
                (core.define (core.symbol.concat identifier @: (core.string-to-symbol (core.integer-to-string index)) @: @address) address)
                (core.redefine @index (core.integer.add index @1))
                (asm.stack.increase)                
                (asm.store address))))
          input-array)
        (core.define (core.symbol.concat identifier @: @size) (core.integer-to-string index))
        ))))        

