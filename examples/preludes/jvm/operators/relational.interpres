; TODO: Extract shared logic

(core.define @< (core.lambda (left, right)
    (core.let (true-label (asm.next-label), done-label (asm.next-label))
      (core.list
        left right
        (core.string.concat @"if_icmplt " true-label)
        false
        (asm.jump done-label)
        (asm.label true-label)
        true
        (asm.label done-label)))))

(core.define @> (core.lambda (left, right)
    (core.let (true-label (asm.next-label), done-label (asm.next-label))
      (core.list
        left right
        (core.string.concat @"if_icmpgt " true-label)
        false
        (asm.jump done-label)
        (asm.label true-label)
        true
        (asm.label done-label)))))

(core.define @<= (core.lambda (left, right)
    (core.let (true-label (asm.next-label), done-label (asm.next-label))
      (core.list
        left right
        (core.string.concat @"if_icmple " true-label)
        false
        (asm.jump done-label)
        (asm.label true-label)
        true
        (asm.label done-label)))))

(core.define @>= (core.lambda (left, right)
    (core.let (true-label (asm.next-label), done-label (asm.next-label))
      (core.list
        left right
        (core.string.concat @"if_icmpge " true-label)
        false
        (asm.jump done-label)
        (asm.label true-label)
        true
        (asm.label done-label)))))

(core.define @!= (core.lambda (left, right)
    (core.let (true-label (asm.next-label), done-label (asm.next-label))
      (core.list
        left right
        (core.string.concat @"if_icmpne " true-label)
        false
        (asm.jump done-label)
        (asm.label true-label
        true
        (asm.label done-label))))))

(core.define @== (core.lambda (left, right)
    (core.let (true-label (asm.next-label), done-label (asm.next-label))
      (core.list
        left right
        (core.string.concat @"if_icmpeq " true-label)
        false
        (asm.jump done-label)
        (asm.label true-label)
        true
        (asm.label done-label)))))

