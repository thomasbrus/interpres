; = prelude.jbc ================================================================

(core.define @asm.generate-label core.random.uuid)

(core.define @HEADER @(".class public Program" ".super java/lang/Object" "" ".method public <init>()V" "aload_0 ; push this" "invokespecial java/lang/Object/<init>()V ; call super" "return" ".end method" "" ".method public static main([Ljava/lang/String;)V" ".limit stack 100" ".limit locals 100"))

(core.define @FOOTER @("return" ".end method"))

(core.define @asm.load (core.lambda (address)
    (core.list (core.string.concat @"iload " address))))

(core.define @asm.loadl (core.lambda (quoted-integer)
    (core.list (core.string.concat
        @"sipush " (core.integer-to-string quoted-integer)))))

(core.define @asm.loadc (core.lambda (quoted-character)
    (asm.loadl (core.character.ord quoted-character))))

(core.define @asm.loads (core.lambda (quoted-string)
  (core.list (core.string.concat
        @"ldc \"" quoted-string @"\""))))

(core.define @asm.store (core.lambda (address)
    (core.list (core.string.concat @"istore " address))))

(core.define @asm.jump (core.lambda (address)
    (core.list (core.string.concat @"goto " address))))

(core.define @asm.jumpifeq (core.lambda (address)
    (core.list (core.string.concat
        @"ifeq " address))))



(core.define @print-int (core.lambda (integer)
    (core.list.concat @("getstatic java/lang/System/out Ljava/io/PrintStream;") integer @("invokevirtual java/io/PrintStream/println(I)V"))))

(core.define @print-string (core.lambda (string)
    (core.list.concat @("getstatic java/lang/System/out Ljava/io/PrintStream;") string @("invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V"))))

(core.define @+ (core.lambda (a b)
    (core.list.concat a b @("iadd"))))

(core.define @- (core.lambda (a b)
    (core.list.concat a b @("isub"))))

(core.define @* (core.lambda (a b)
    (core.list.concat a b @("imul"))))

(core.define @/ (core.lambda (a b)
    (core.list.concat a b @("idiv"))))  

(core.define @% (core.lambda (a b)
    (core.list.concat a b @("irem"))))  

(core.define @<= (core.lambda (a b) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat a b 
      (core.list (core.string.concat @"if_icmple " jump-label))
      @("iconst_0")
      (core.list (core.string.concat @"goto " jump-label-2))
      (core.list (core.string.concat jump-label @": iconst_1"))
      (core.list (core.string.concat jump-label-2 @": nop"))
    )
)))
    
(core.define @< (core.lambda (a b) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat a b 
      (core.list (core.string.concat @"if_icmplt " jump-label))
      @("iconst_0")
      (core.list (core.string.concat @"goto " jump-label-2))
      (core.list (core.string.concat jump-label @": iconst_1"))
      (core.list (core.string.concat jump-label-2 @": nop"))
    )
)))

(core.define @> (core.lambda (a b) (core.let (jump-label (asm.generate-label), jump-label-2(asm.generate-label))
    (core.list.concat a b 
      (core.list (core.string.concat @"if_icmpgt " jump-label))
      @("iconst_0")
      (core.list (core.string.concat @"goto " jump-label-2))
      (core.list (core.string.concat jump-label @": iconst_1"))
      (core.list (core.string.concat jump-label-2 @": nop"))
    )
)))

(core.define @>= (core.lambda (a b) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat a b 
      (core.list (core.string.concat @"if_icmpge " jump-label))
      @("iconst_0")
      (core.list (core.string.concat @"goto " jump-label-2))
      (core.list (core.string.concat jump-label @": iconst_1"))
      (core.list (core.string.concat jump-label-2 @": nop"))
    )
)))

(core.define @!= (core.lambda (a b) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat a b 
      (core.list (core.string.concat @"if_icmpne " jump-label))
      @("iconst_0")
      (core.list (core.string.concat @"goto " jump-label-2))
      (core.list (core.string.concat jump-label @": iconst_1"))
      (core.list (core.string.concat jump-label-2 @": nop"))
    )
)))

(core.define @== (core.lambda (a b) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat a b 
      (core.list (core.string.concat @"if_icmpeq " jump-label))
      @("iconst_0")
      (core.list (core.string.concat @"goto " jump-label-2))
      (core.list (core.string.concat jump-label @": iconst_1"))
      (core.list (core.string.concat jump-label-2 @": nop"))
    )
)))

(core.define @&& (core.lambda (a b)
    (core.list.concat a b @("iand"))))

(core.define @|| (core.lambda (a b)
    (core.list.concat a b @("ior"))))


(core.define @if (core.lambda (predicate consequent alternative) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat
      predicate
      (asm.jumpifeq jump-label)
      consequent
      (asm.jump jump-label-2)
      (core.list (core.string.concat jump-label @": nop"))
      alternative
      (core.list (core.string.concat jump-label-2 @": nop"))

            ))))

(core.define @while (core.lambda (condition body) (core.let (jump-label (asm.generate-label), jump-label-2 (asm.generate-label))
    (core.list.concat    
      (core.list (core.string.concat jump-label @": nop"))      
      condition
      (asm.jumpifeq jump-label-2)
      body
      (asm.jump jump-label)
      (core.list (core.string.concat jump-label-2 @": nop"))     
    )
)))

(core.define @get-int (core.lambda (varname)
    (assign varname (core.list.concat @("new java/util/Scanner" "dup" "getstatic java/lang/System/in Ljava/io/InputStream;" "invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;)V" "invokevirtual java/util/Scanner/nextInt()I")
 ))))

(core.define @get-string (core.lambda (varname)
    (assign varname (core.list.concat @("new java/util/Scanner" "dup" "getstatic java/lang/System/in Ljava/io/InputStream;" "invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;)V" "invokevirtual java/util/Scanner/next()Ljava/lang/String;")
 ))))

; = prelude.jbc.variables ======================================================

(core.define @asm.variables.counter @0)

(core.define @assign (core.lambda (identifier value)
    (core.list.concat value (asm.store ~(core.symbol.concat identifier @: @address)))))

(core.define @var (core.lambda (identifier initial-value)
    (core.let (address (core.integer-to-string asm.variables.counter))
      (core.define @asm.variables.counter (core.integer.add @1 asm.variables.counter))
      (core.define identifier (asm.load address))
      (core.define (core.symbol.concat identifier @: @address) address)
      (assign identifier initial-value))))
    

; ==============================================================================

HEADER

(var @i 0)

(while (== i 0) 
  (core.list.concat 
    (print-string "Pick a number between 0 and 25") 
    (get-int @i) 
    (if (|| (<= i 0) (> i 25)) 
      (core.list.concat (print-string "INVALID VALUE. Please try again") (assign @i 0)) 
      (print-string "Start countdown:") 
    )
  )
)

(while (> i 0) (core.list.concat (print-int i) (assign @i (- i 1))))


FOOTER

